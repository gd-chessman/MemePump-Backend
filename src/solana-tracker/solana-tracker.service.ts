import { Injectable, OnModuleInit, Logger } from "@nestjs/common";
import { Connection, PublicKey, LAMPORTS_PER_SOL } from "@solana/web3.js";
import { CopyTradeService } from "../copy-trade/copy-trade.service";
import { ConfigService } from "@nestjs/config";
import { CacheService } from '../cache/cache.service';
import { SolanaService } from "../solana/solana.service";
import { Inject } from "@nestjs/common";
import { SolanaTrackingService } from "../solana/services/tracking.service";
import { EventEmitter2 } from "@nestjs/event-emitter";
import { SolanaWebSocketService } from "../solana/solana-websocket.service";

@Injectable()
export class SolanaTrackerService implements OnModuleInit {
    private readonly logger = new Logger(SolanaTrackerService.name);
    private lastProcessedTime = new Date(Date.now() - 5 * 60 * 1000); // 5 minutes ago
    private trackingWallets = new Set<string>();

    constructor(
        private readonly copyTradeService: CopyTradeService,
        private readonly configService: ConfigService,
        private readonly cacheService: CacheService,
        private readonly solanaService: SolanaService,
        private readonly solanaTrackingService: SolanaTrackingService,
        private readonly eventEmitter: EventEmitter2,
        @Inject('SOLANA_CONNECTION')
        private readonly connection: Connection,
        private readonly solanaWebSocketService: SolanaWebSocketService
    ) {
        this.eventEmitter.on('wallet.transaction', async (data) => {
            await this.handleTransaction(data);
        });
    }

    async onModuleInit() {
        console.log("üöÄ Solana Copy Trade Tracker is running...");

        // Kh·ªüi ƒë·ªông theo d√µi
        this.startTracking();
    }

    // Kh·ªüi ƒë·ªông theo d√µi qua WebSocket
    private async startTracking() {
        try {
            const walletMap = await this.getTrackingWalletsByTelegram();

            // ƒêƒÉng k√Ω theo d√µi t·∫•t c·∫£ c√°c v√≠
            for (const telegramWallet in walletMap) {
                const walletData = walletMap[telegramWallet];

                for (const { trackingWallet, privateKey } of walletData) {
                    try {
                        // Th√™m v√†o danh s√°ch theo d√µi
                        this.trackingWallets.add(trackingWallet);

                        // ƒêƒÉng k√Ω theo d√µi qua WebSocket
                        await this.solanaTrackingService.trackTransactions(
                            trackingWallet,
                            'copy-trade'
                        );

                        console.log(`üîî Started tracking wallet: ${trackingWallet}`);
                    } catch (error) {
                        console.error(`‚ö†Ô∏è Error tracking wallet ${trackingWallet}:`, error.message);
                    }
                }
            }
        } catch (error) {
            console.error("‚ùå Error starting tracking:", error.message);
        }
    }

    // X·ª≠ l√Ω giao d·ªãch t·ª´ hash
    private async processCopyTradeByHash(trackingWallet: string, txHash: string) {
        try {
            // Check if already processed
            const isProcessed = await this.copyTradeService.isTransactionProcessed(txHash);
            if (isProcessed) {
                console.log(`‚ö†Ô∏è Transaction already processed: ${txHash}`);
                return;
            }

            // T√¨m th√¥ng tin telegram wallet v√† private key
            const walletMap = await this.getTrackingWalletsByTelegram();
            let telegramWallet = '';
            let privateKey = '';

            for (const tgWallet in walletMap) {
                const walletData = walletMap[tgWallet];
                const found = walletData.find(w => w.trackingWallet === trackingWallet);

                if (found) {
                    telegramWallet = tgWallet;
                    privateKey = found.privateKey;
                    break;
                }
            }

            if (!telegramWallet || !privateKey) {
                console.log(`‚ö†Ô∏è Could not find telegram wallet for tracking wallet: ${trackingWallet}`);
                return;
            }

            // L·∫•y transaction details t·ª´ hash
            const txDetails = await this.connection.getParsedTransaction(txHash, {
                maxSupportedTransactionVersion: 0
            });

            // Ph√¢n t√≠ch giao d·ªãch ƒë·ªÉ l·∫•y token addresses
            const { inputMint, outputMint } = await this.solanaService.analyzeTransaction(txHash);

            // X√°c ƒë·ªãnh lo·∫°i giao d·ªãch (buy/sell)
            const transactionType = inputMint === "So11111111111111111111111111111111111111112"
                ? 'buy' : 'sell';

            if (transactionType === 'buy') {
                // Copy l·ªánh mua nh∆∞ b√¨nh th∆∞·ªùng
                const detail = await this.copyTradeService.createCopyTradeDetail({
                    ct_traking_hash: txHash,
                    ct_detail_status: 'wait',
                    ct_detail_time: new Date(),
                    ct_type: 'buy'
                });
                await this.copyTradeService.executeCopyTrade({
                    telegramWallet,
                    trackingWallet,
                    privateKey,
                    transaction: txDetails,
                    detail,
                    inputMint,
                    outputMint
                });

                // L∆∞u v√†o position_tracking n·∫øu ct_sell_method l√† auto ho·∫∑c manual
                const copyTrade = await this.copyTradeService.getCopyTrade(trackingWallet);
                if (copyTrade && ['auto', 'manual'].includes(copyTrade.ct_sell_method)) {
                    // L·∫•y gi√° v√† s·ªë l∆∞·ª£ng t·ª´ detail
                    const currentPrice = detail.ct_detail_price;
                    const tradeAmount = detail.ct_detail_amount;

                    await this.copyTradeService.createPositionTracking({
                        ct_trade: copyTrade,
                        pt_token_address: outputMint,
                        pt_entry_price: currentPrice,
                        pt_amount: tradeAmount,
                        pt_status: 'open'
                    });
                }
            } else {
                // Khi l√† l·ªánh b√°n, ki·ªÉm tra position_tracking
                const positions = await this.copyTradeService.getOpenPositions(trackingWallet, outputMint);

                for (const position of positions) {
                    if (position.ct_trade.ct_sell_method === 'auto') {
                        // T·ª± ƒë·ªông b√°n v·ªõi t·ªâ l·ªá t∆∞∆°ng ·ª©ng
                        await this.copyTradeService.executeSellOrder(position, 'proportional');
                    } else if (position.ct_trade.ct_sell_method === 'manual') {
                        // Check ƒëi·ªÅu ki·ªán TP/SL
                        const currentPrice = await this.solanaService.getTokenPrice(outputMint);
                        const shouldSell = this.copyTradeService.checkTPSL(
                            position,
                            currentPrice,
                            position.ct_trade.ct_tp,
                            position.ct_trade.ct_sl
                        );

                        if (shouldSell) {
                            // B√°n to√†n b·ªô v·ªã th·∫ø
                            await this.copyTradeService.executeSellOrder(position, 'full');
                        }
                    }
                }
            }

        } catch (error) {
            console.error('Error processing copy trade:', error);
        }
    }

    // Gi·ªØ l·∫°i c√°c ph∆∞∆°ng th·ª©c c≈© ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh t∆∞∆°ng th√≠ch
    async getTrackingWalletsByTelegram(): Promise<Record<string, { trackingWallet: string, privateKey: string }[]>> {
        const activeTrades = await this.copyTradeService.getActiveTrackingWallets();

        const walletMap: Record<string, { trackingWallet: string, privateKey: string }[]> = {};

        activeTrades.forEach(trade => {
            // Th√™m ƒëi·ªÅu ki·ªán ki·ªÉm tra ct_amount
            if (trade.ct_amount <= 0.001) {
                console.log(`‚ö†Ô∏è Skipping wallet ${trade.ct_tracking_wallet} due to insufficient ct_amount: ${trade.ct_amount}`);
                return; // Skip this iteration
            }

            const telegramWallet = trade.ct_wallet.wallet_id.toString();
            const trackingWallet = trade.ct_tracking_wallet;
            const privateKeyObject = JSON.parse(trade.ct_wallet.wallet_private_key);
            const privateKey = privateKeyObject?.solana; // üåü L·∫•y private key c·ªßa Solana

            if (!walletMap[telegramWallet]) {
                walletMap[telegramWallet] = [];
            }

            // ‚úÖ Th√™m object ch·ª©a c·∫£ trackingWallet v√† privateKey
            if (!walletMap[telegramWallet].some(item => item.trackingWallet === trackingWallet)) {
                walletMap[telegramWallet].push({ trackingWallet, privateKey });
            }
        });

        console.log("üîç Telegram Wallets with Tracking Wallets and Private Keys:", walletMap);
        return walletMap;
    }

    private async getTransactionsWithRetry(address: PublicKey, retries = 5, delay = 2000): Promise<any[]> {
        // Check cache first
        const cacheKey = `transactions:${address.toString()}`;
        const cachedTxs = await this.cacheService.get(cacheKey);
        if (cachedTxs) {
            return cachedTxs;
        }

        // Get excluded hashes first
        const excludedHashes = await this.copyTradeService.getExcludedHashes();

        for (let i = 0; i < retries; i++) {
            try {
                const transactions = await this.connection.getSignaturesForAddress(address, { limit: 5 });

                // Filter out excluded transactions
                const filteredTxs = transactions.filter(tx =>
                    !excludedHashes.includes(tx.signature)
                );

                // Cache filtered results
                await this.cacheService.set(cacheKey, filteredTxs, 30);
                return filteredTxs;
            } catch (error) {
                if (error.message?.includes('429')) {
                    // Exponential backoff for rate limits
                    const backoffDelay = delay * Math.pow(2, i);
                    console.log(`Rate limit hit, waiting ${backoffDelay}ms...`);
                    await new Promise(resolve => setTimeout(resolve, backoffDelay));
                    continue;
                }

                if (i === retries - 1) {
                    console.log(`‚ùå All retries failed for ${address.toString()}`);
                    return [];
                }

                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
        return [];
    }

    private async processCopyTrade(telegramWallet: string, trackingWallet: string, privateKey: string, transaction: any, txHash: string) {
        try {
            // Check if already processed
            const isProcessed = await this.copyTradeService.isTransactionProcessed(txHash);
            if (isProcessed) {
                console.log(`‚ö†Ô∏è Transaction already processed: ${txHash}`);
                return;
            }

            // L·∫•y transaction details t·ª´ hash
            const txDetails = await this.connection.getParsedTransaction(txHash, {
                maxSupportedTransactionVersion: 0
            });

            // Ph√¢n t√≠ch giao d·ªãch ƒë·ªÉ l·∫•y token addresses
            const { inputMint, outputMint } = await this.solanaService.analyzeTransaction(txHash);

            // X√°c ƒë·ªãnh lo·∫°i giao d·ªãch (buy/sell)
            const transactionType = inputMint === "So11111111111111111111111111111111111111112"
                ? 'buy' : 'sell';

            if (transactionType === 'buy') {
                // Copy l·ªánh mua nh∆∞ b√¨nh th∆∞·ªùng
                const detail = await this.copyTradeService.createCopyTradeDetail({
                    ct_traking_hash: txHash,
                    ct_detail_status: 'wait',
                    ct_detail_time: new Date(),
                    ct_type: 'buy'
                });
                await this.copyTradeService.executeCopyTrade({
                    telegramWallet,
                    trackingWallet,
                    privateKey,
                    transaction: txDetails,
                    detail,
                    inputMint,
                    outputMint
                });

                // L∆∞u v√†o position_tracking n·∫øu ct_sell_method l√† auto ho·∫∑c manual
                const copyTrade = await this.copyTradeService.getCopyTrade(trackingWallet);
                if (copyTrade && ['auto', 'manual'].includes(copyTrade.ct_sell_method)) {
                    // L·∫•y gi√° v√† s·ªë l∆∞·ª£ng t·ª´ detail
                    const currentPrice = detail.ct_detail_price;
                    const tradeAmount = detail.ct_detail_amount;

                    await this.copyTradeService.createPositionTracking({
                        ct_trade: copyTrade,
                        pt_token_address: outputMint,
                        pt_entry_price: currentPrice,
                        pt_amount: tradeAmount,
                        pt_status: 'open'
                    });
                }
            } else {
                // Khi l√† l·ªánh b√°n, ki·ªÉm tra position_tracking
                const positions = await this.copyTradeService.getOpenPositions(trackingWallet, outputMint);

                for (const position of positions) {
                    if (position.ct_trade.ct_sell_method === 'auto') {
                        // T·ª± ƒë·ªông b√°n v·ªõi t·ªâ l·ªá t∆∞∆°ng ·ª©ng
                        await this.copyTradeService.executeSellOrder(position, 'proportional');
                    } else if (position.ct_trade.ct_sell_method === 'manual') {
                        // Check ƒëi·ªÅu ki·ªán TP/SL
                        const currentPrice = await this.solanaService.getTokenPrice(outputMint);
                        const shouldSell = this.copyTradeService.checkTPSL(
                            position,
                            currentPrice,
                            position.ct_trade.ct_tp,
                            position.ct_trade.ct_sl
                        );

                        if (shouldSell) {
                            // B√°n to√†n b·ªô v·ªã th·∫ø
                            await this.copyTradeService.executeSellOrder(position, 'full');
                        }
                    }
                }
            }

        } catch (error) {
            console.error('Error processing copy trade:', error);
        }
    }

    private async handleTransaction(data: any) {
        try {
            const { address, signature } = data;

            this.logger.debug('Received transaction:', { address, signature });

            // Ki·ªÉm tra xem c√≥ ph·∫£i v√≠ ƒëang theo d√µi kh√¥ng
            if (this.trackingWallets.has(address)) {
                await this.processCopyTradeByHash(address, signature);
            }
        } catch (error) {
            this.logger.error('Error processing transaction:', error);
        }
    }
}
